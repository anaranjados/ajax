Необходимо реализовать справочник клиентов и их счетов, создав 2 связанные таблицы Customer (организации) и Account (счета организаций).

Визуализировать их в виде единого справочника с 2мя гридами - в одном организации в другом их счета. При позиционировании курсора на определенной организации, в гриде счетов должны отображаться только счета, принадлежащие данной организации.

Справочник должен позволять добавлять организации, добавлять счета для существующей организации, производить редактирование счетов и организаций а так же их удаление.
Интерфейс должен быть интуитивно понятным.
Форматы и ограничения на поля справочника:

Customer

1. Наименование организации. Строка 100 символов, Обязательное заполнение. Допустимые символы только кириллица.

2. ИНН организации. Строка 12 символов, Обязательное заполнение. Допустимы только цифры.

3. Адрес организации. Строка 255 символов, Необязательное заполнение.


Account

1. Счет. Строка 20 символов, Обязательное заполнение. Длина строго 20 символов. Только цифры.

2. Название счета. Строка 100 символов. Допустимые символы только кириллица. Необязательное заполнение.

3. БИК банка. Строка 9 символов. Допустимые символы только цифры. Обязательное заполнение.

4. Остаток на счете. Числовое с двумя знаками после запятой. Сумма остатка должна попадать в диапазон от 0 до 999 999 999 999.99 включительно. Обязательное заполнение.



Данный справочник желательно выполнить в виде исполняемого модуля + исходные тексты к нему на любом языке. 

Допустима реализация в виде интернет-страницы + исходные тексты на любом языке (чтобы можно было развернуть решение для проверки на территории Компании).

Преимуществом будет реализация в двух видах, в виде исполняемого модуля и в виде интернет-страницы. Хранение данных - на Ваш выбор, можно даже в текстовом файле, но лучше всего БД Access










/*	Reserving func with reading data for each type
function account(t, c) {
	if (t == 'update') {
		idObj		= document.querySelector('input[name=id]');
		accNumber 	= document.querySelectorAll('input[name=acc_number]')[c];
		accName 	= document.querySelectorAll('input[name=acc_name]')[c];
		bik 		= document.querySelectorAll('input[name=bik]')[c];
		balance 	= document.querySelectorAll('input[name=balance]')[c];
		//
		console.log(accNumber.value);
		console.log(accName.value);
		console.log(balance.value);
		if ( accNumber.length !== accNorma && !isNaN(parseInt(accNumber.value)) &&
			!isNaN(parseInt(bik.value)) && parseInt(bik.value) !== bikNorma &&
			!isNaN(parseInt(balance.value)) ) {
			const send = { acc_number: accNumber.value, acc_name: accName.value, bik: bik.value, balance: balance.value, id: idObj.value };
			const add = document.createElement("script");
			add.src = 'btn_save_acc.php?params=' +JSON.stringify(send);
			document.body.appendChild(add);
		}
		else {alert('Please fill Account correctly')}
	}
	else if (t == 'add') {
		idObj		= document.querySelector('input[name=id]');
		accNumber 	= document.querySelectorAll('input[name=acc_number]')[c];
		accName 	= document.querySelectorAll('input[name=acc_name]')[c];
		bik 		= document.querySelectorAll('input[name=bik]')[c];
		balance 	= document.querySelectorAll('input[name=balance]')[c];
		//
		if ( accNumber.length !== accNorma && !isNaN(parseInt(accNumber.value)) &&
			!isNaN(parseInt(bik.value)) && parseInt(bik.value) !== bikNorma &&
			!isNaN(parseInt(balance.value)) ) {
			const send = { acc_number: accNumber.value, acc_name: accName.value, bik: bik.value, balance: balance.value, id: idObj.value };
			const add = document.createElement("script");
			add.src = 'btn_add_acc.php?params=' +JSON.stringify(send);
			document.body.appendChild(add);
		}
		else {alert('Please fill Account correctly')}
	}
	else if (t == 'del') {
		// idObj		= document.querySelector('input[name=id]');
		accNumber 	= document.querySelectorAll('input[name=acc_number]')[c];
		//
		if ( accNumber.length !== accNorma && !isNaN(parseInt(accNumber.value)) ) {
			const send = { acc_number: accNumber.value };
			const add = document.createElement("script");
			add.src = 'btn_del_acc.php?params=' +JSON.stringify(send);
			document.body.appendChild(add);
		}
		else {alert('This account does not exist, please enter 20 digits')}
	}
	else { console.log('No buttons were heard.')}
}
*/

/*
Строка содержит только символы и числа     ^[a-zA-Z\d]*$
IF(table.field REGEXP '[абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЗЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ]', '', table.field) as field

https://stackoverflow.com/questions/27640566/how-to-update-or-remove-all-special-characters-from-a-varchar-column

create function dbo.AnyNonCyril (@str varchar(256)) returns varchar(256) with schemabinding
    begin
       if @str is null
       	return null
       declare @str2 varchar(256)
       set @str2 = ''
       declare @len int
       set @len = len(@str)
       declare @pos int
       set @pos = 1
       while @pos <= @len begin
          declare @c int
          set @c = ascii(substring(@str, @pos, 1))
          if @c between 33 and 126
             set @str2 = @str2 + char(@c)
          set @pos = @pos + 1
          end
       if len(@str2) = 0
       	return null
       return @str2
	end;

update [][]
SET name = (
           CASE WHEN name LIKE '%[^a-zA-Z0-9]%' 
                           THEN (SELECT dbo.AnyNonCyril(name))
                      ELSE [name]
                      END
            );


http://www.asciitable.com/
33-126
*/
